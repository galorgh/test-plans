name: libp2p perf test

# How to configure a repository for running this workflow:
# 1. Configure auth for the AWS provider as per https://registry.terraform.io/providers/hashicorp/aws/latest/docs#authentication-and-configuration
# 2. Run 'terraform init' and 'terraform apply' in 'perf/terraform/configs/remote' to create the resources needed for this workflow
# 3. Go to https://console.aws.amazon.com/iamv2/home?#/users/details/perf?section=security_credentials
# 4. Click 'Create access key' to get the access key ID and secret access key
# 5. Go to https://github.com/libp2p/test-plans/settings/secrets/actions
# 6. Click 'New repository secret', set the name to 'PERF_AWS_SECRET_ACCESS_KEY', and paste the secret access key from step 5
# 7. Go to https://github.com/libp2p/test-plans/settings/variables/actions
# 8. Click 'New repository variable', set the name to 'PERF_AWS_ACCESS_KEY_ID', and paste the access key ID from step 5

on:
  workflow_dispatch:

jobs:
  perf:
    name: Perf
    runs-on: ubuntu-latest
    timeout-minutes: 40
    defaults:
      run:
        shell: bash
        working-directory: perf
    env:
      AWS_ACCESS_KEY_ID: ${{ vars.PERF_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PERF_AWS_SECRET_ACCESS_KEY }}
      TF_IN_AUTOMATION: 1
      TF_INPUT: 0
      TF_VAR_ci_enabled: false
      TF_VAR_long_lived_enabled: false
      TF_VAR_short_lived_enabled: true
    steps:
      - id: ssh
        name: Generate SSH key
        run: |
          make ssh-keygen
          private-key="$(cat terraform/modules/short_lived/files/perf)"
          echo ":add-mask:${private-key}"
          echo "private-key=${private-key}" >> $GITHUB_OUTPUT
      - name: Configure SSH
        uses: webfactory/ssh-agent@d4b9b8ff72958532804b70bbe600ad43b36d5f2e # v0.8.0
        with:
          ssh-private-key: ${{ steps.ssh.outputs.private-key }}
      - name: Configure git
        run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com>"
          git config --global user.name "${GITHUB_ACTOR}"
      - name: Configure terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # v2.0.3
      - name: Checkout test-plans
        uses: actions/checkout@v3
        with:
          repository: libp2p/test-plans
          ref: ${{ github.ref }}
      - name: Init terraform
        run: terraform init
        working-directory: perf/terraform/configs/local
      - name: Apply terraform
        run: terraform apply -auto-approve
        working-directory: perf/terraform/configs/local
      - id: server
        name: Retrieve server's IP
        run: echo "ip=$(terraform output -raw server_ip)"
      - id: client
        name: Retrieve client's IP
        run: echo "ip=$(terraform output -raw client_ip)"
      - name: Download dependencies
        run: npm ci
        working-directory: perf/runner
      - name: Run tests
        env:
          SERVER_IP: ${{ steps.server.outputs.ip }}
          CLIENT_IP: ${{ steps.client.outputs.ip }}
        run: npm run start -- --client-public-ip $CLIENT_IP --server-public-ip $SERVER_IP
        working-directory: perf/runner
      - name: Push
        run: |
          git add perf/runner/benchmark-results.json
          git commit -m "perf: update benchmark results"
          git push
      - name: Destroy terraform
        if: always()
        run: terraform destroy -auto-approve
        working-directory: perf/terraform/configs/local
