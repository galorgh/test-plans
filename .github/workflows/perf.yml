name: libp2p perf test

# How to configure a repository for running this workflow:
# 1. Run 'make ssh-keygen' in 'perf' to generate a new SSH key pair named 'user' in 'perf/terraform/region/files'
# 2. Export AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY for the account of your choice
# 3. Run 'terraform apply' in 'perf/terraform' to create the AWS resources
# 4. Go to https://console.aws.amazon.com/iamv2/home?#/users/details/perf?section=security_credentials
# 5. Click 'Create access key' to get the access key ID and secret access key
# 6. Go to https://github.com/libp2p/test-plans/settings/secrets/actions
# 7. Click 'New repository secret', set the name to 'PERF_AWS_SECRET_ACCESS_KEY', and paste the secret access key from step 6
# 8. Click 'New repository secret', set the name to 'PERF_SSH_PRIVATE_KEY', and paste the private key from step 1
# 9. Go to https://github.com/libp2p/test-plans/settings/variables/actions
# 10. Click 'New repository variable', set the name to 'PERF_AWS_ACCESS_KEY_ID', and paste the access key ID from step 6

on:
  workflow_dispatch:

jobs:
  perf:
    name: Perf
    runs-on: ubuntu-latest
    timeout-minutes: 40
    defaults:
      run:
        shell: bash
        working-directory: perf
    env:
      AWS_ACCESS_KEY_ID: ${{ vars.PERF_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.PERF_AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Configure SSH
        uses: webfactory/ssh-agent@d4b9b8ff72958532804b70bbe600ad43b36d5f2e # v0.8.0
        with:
          ssh-private-key: ${{ secrets.PERF_SSH_PRIVATE_KEY }}
      - name: Configure git
        run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com>"
          git config --global user.name "${GITHUB_ACTOR}"
      - name: Checkout test-plans
        uses: actions/checkout@v3
        with:
          repository: libp2p/test-plans
          ref: ${{ github.ref }}
      - id: server
        name: Provision server
        run: echo "id=$(make provision-server | tail -n 1)" >> $GITHUB_OUTPUT
      - id: client
        name: Provision client
        run: echo "id=$(make provision-client | tail -n 1)" >> $GITHUB_OUTPUT
      - id: ip
        name: Wait for client/server IP
        env:
          SERVER_ID: ${{ steps.server.outputs.id }}
          CLIENT_ID: ${{ steps.client.outputs.id }}
        run: |
          read SERVER_IP CLIENT_IP <<< $(make wait SERVER_ID=$SERVER_ID CLIENT_ID=$CLIENT_ID | tail -n 1)
          echo "server=$SERVER_IP" >> $GITHUB_OUTPUT
          echo "client=$CLIENT_IP" >> $GITHUB_OUTPUT
      - name: Download dependencies
        run: npm ci
        working-directory: perf/runner
      - name: Run tests
        env:
          SERVER_IP: ${{ steps.ip.outputs.server }}
          CLIENT_IP: ${{ steps.ip.outputs.client }}
        run: npm run start -- --client-public-ip $CLIENT_IP --server-public-ip $SERVER_IP
        working-directory: perf/runner
      - name: Archive results
        uses: actions/upload-artifact@v2
        with:
          name: results
          path: perf/runner/benchmark-results.json
      - name: Push
        run: |
          git add perf/runner/benchmark-results.json
          git commit -m "perf: update benchmark results"
          git push
      - name: Deprovision client
        if: always() && steps.client.outputs.id != ''
        env:
          CLIENT_ID: ${{ steps.client.outputs.id }}
        run: make deprovision-client CLIENT_ID=$CLIENT_ID
      - name: Deprovision server
        if: always() && steps.server.outputs.id != ''
        env:
          SERVER_ID: ${{ steps.server.outputs.id }}
        run: make deprovision-server SERVER_ID=$SERVER_ID
